{"version":3,"sources":["assets/images/nba-logoman-word-white.svg","components/TopNavBar.js","components/ShotChart.js","components/CountSlider.js","components/DataViewContainer.js","components/constants.js","components/ProfileList.js","components/Profile.js","components/SearchBar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","TopNavBar","className","src","logo","alt","window","d3_hexbin","hexbin","ShotChart","nba","stats","shots","PlayerID","this","props","playerId","Season","then","response","console","log","final_shots","shot_Chart_Detail","map","shot","x","locX","y","locY","action_type","actionType","shot_distance","shotDistance","shot_made_flag","shotMadeFlag","courtSelection","d3","html","chart_court","court","width","chart_shots","shotRenderThreshold","minCount","displayToolTips","displayTooltip","displayType","chartType","call","datum","id","React","Component","CountSlider","useState","inputValue","value","setValue","handleChange","cleanValue","Number","onCountSliderChange","span","min","max","onChange","style","marginLeft","RadioGroup","Radio","Group","DataViewContainer","state","count","setState","onChartTypeChange","e","target","onTooltipChange","_","debounce","checkedChildren","unCheckedChildren","defaultChecked","PROFILE_PIC_URL_PREFIX","DEFAULT_PLAYER_INFO","fullName","teamAbbreviation","ProfileList","property","Profile","playerInfo","teamCity","teamName","playerName","height","weight","pts","reb","ast","pie","Option","AutoComplete","SearchBar","dataSource","handleSearch","searchPlayers","player","onSelect","handleSelectPlayer","options","key","size","onSearch","placeholder","optionLabelProp","suffix","type","Main","loadPlayerInfo","findPlayer","info","commonPlayerInfo","playerHeadlineStats","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d99559eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nba-logoman-word-white.9470e2d5.svg\";","import React from 'react';\nimport logo from '../assets/images/nba-logoman-word-white.svg';\n\nconst TopNavBar = () => {\n  return (\n    <header className='App-header'>\n      <img src={logo} className='App-logo' alt='logo' />\n    </header>\n  );\n};\nexport default TopNavBar;\n","import React from 'react';\nimport nba from 'nba';\nimport * as d3 from 'd3';\nimport { hexbin } from 'd3-hexbin';\nimport { court, shots } from 'd3-shotchart';\nimport PropTypes from 'prop-types';\n\nwindow.d3_hexbin = {hexbin : hexbin}; // workaround library problem\n\n// ShotChart does not support React.\n// This is a React Wrapper to use the library.\nexport class ShotChart extends React.Component {\n    // make sure the playerId is a number and it is not empty\n    static propTypes = {\n        playerId: PropTypes.number.isRequired,\n        minCount: PropTypes.number,\n        chartType: PropTypes.string,\n        displayTooltip: PropTypes.bool,\n    }\n\n    // what to display on the DOM.\n    componentDidUpdate() {\n        // nba.stats.shots returns a Promise\n        nba.stats.shots({\n            PlayerID: this.props.playerId,\n            Season: \"2018-19\"\n        }).then((response) => {\n            console.log(response);\n            const final_shots = response.shot_Chart_Detail.map(shot => ({\n                x: (shot.locX + 250) / 10,\n                y: (shot.locY + 50) / 10,\n                action_type: shot.actionType,\n                shot_distance: shot.shotDistance,\n                shot_made_flag: shot.shotMadeFlag,\n            }));\n\n            const courtSelection = d3.select(\"#shot-chart\");\n            // clear the shot chart when slider value is changed, not a re-rendering\n            // without this line, the shot chart will not update later.\n            courtSelection.html('');\n            const chart_court = court().width(500);\n            // shot render threshold: min number of shots required\n            // for a hexbin to display\n            const chart_shots = shots()\n                .shotRenderThreshold(this.props.minCount)\n                .displayToolTips(this.props.displayTooltip)\n                .displayType(this.props.chartType);\n            courtSelection.call(chart_court);\n            courtSelection.datum(final_shots).call(chart_shots);\n        });\n    }\n    render() {\n        return (\n            <div id=\"shot-chart\"></div>\n        );\n    }\n}\n","import React, { useState } from 'react';\nimport { Slider, InputNumber, Row, Col } from 'antd';\n\nconst CountSlider = props => {\n  const [value, setValue] = useState(props.inputValue);\n\n  const handleChange = value => {\n    const cleanValue = Number(value) ? value : props.inputValue;\n    setValue(cleanValue);\n    // send the slider value back to parent component\n    props.onCountSliderChange(value);\n  };\n\n  return (\n    <Row>\n      <Col span={12}>\n        <Slider value={value} min={1} max={20} onChange={handleChange} />\n      </Col>\n      <Col span={4}>\n        <InputNumber\n          value={value}\n          min={1}\n          max={20}\n          style={{ marginLeft: 16 }}\n          onChange={handleChange}\n        />\n      </Col>\n    </Row>\n  );\n};\nexport default CountSlider;\n// import React from 'react';\n// import { Slider, InputNumber, Row, Col } from 'antd';\n\n// export class CountSlider extends React.Component {\n//   state = {\n//     // get value from parent component, i.e. DataViewContainer.\n//     inputValue: this.props.value\n//   };\n\n//   onChange = value => {\n//     const cleanValue = Number(value) ? value : this.state.inputValue;\n//     this.setState({\n//       inputValue: cleanValue\n//     });\n//     // send the slider value back to parent component\n//     this.props.onCountSliderChange(cleanValue);\n//   };\n\n//   render() {\n//     return (\n//       <Row>\n//         <Col span={12}>\n//           <Slider\n//             min={1}\n//             max={20}\n//             onChange={this.onChange}\n//             value={this.state.inputValue}\n//           />\n//         </Col>\n//         <Col span={4}>\n//           <InputNumber\n//             min={1}\n//             max={20}\n//             style={{ marginLeft: 16 }}\n//             value={this.state.inputValue}\n//             onChange={this.onChange}\n//           />\n//         </Col>\n//       </Row>\n//     );\n//   }\n// }\n","import React from 'react';\nimport _ from 'lodash';\nimport { ShotChart } from './ShotChart';\nimport CountSlider from './CountSlider';\nimport { Radio, Row, Col, Switch } from 'antd';\n\nconst RadioGroup = Radio.Group;\n\n// Put count slider and shot chart under the same parent component.\nexport class DataViewContainer extends React.Component {\n  state = {\n    minCount: 2,\n    chartType: 'hexbin',\n    displayTooltip: true\n  };\n\n  onCountSliderChange = count => {\n    this.setState({ minCount: count });\n  };\n\n  // e corresponds to which radio chose by user\n  // setState to re-render the new change\n  onChartTypeChange = e => {\n    console.log(e.target.value);\n    this.setState({ chartType: e.target.value });\n  };\n\n  onTooltipChange = displayTooltip => {\n    console.log(displayTooltip);\n    this.setState({ displayTooltip });\n  };\n\n  render() {\n    console.log('render');\n    return (\n      <div className='data-view'>\n        <ShotChart\n          playerId={this.props.playerId}\n          minCount={this.state.minCount}\n          chartType={this.state.chartType}\n          displayTooltip={this.state.displayTooltip}\n        />\n        <div className='filters'>\n          {this.state.chartType === 'hexbin' ? (\n            <CountSlider\n              value={this.state.minCount}\n              // count slider send back changed values to parent component\n              // Lodash debounce function: after user slide the slider, wait for 500ms to\n              //       // run the function. prevent user slides the slider too fast.\n              onCountSliderChange={_.debounce(this.onCountSliderChange, 500)}\n            />\n          ) : null}\n          <br />\n          <Row>\n            <Col span={9}>\n              <RadioGroup\n                onChange={this.onChartTypeChange}\n                value={this.state.chartType}\n              >\n                <Radio value='hexbin'>Hexbin</Radio>\n                <Radio value='scatter'>Scatter</Radio>\n              </RadioGroup>\n            </Col>\n            <Col span={4}>\n              <Switch\n                checkedChildren='On'\n                unCheckedChildren='Off'\n                onChange={this.onTooltipChange}\n                defaultChecked\n              />\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n","export const PROFILE_PIC_URL_PREFIX =\n  'https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190';\nexport const TEAM_PIC_URL_PREFIX =\n  'https://stats.nba.com/media/img/teams/logos';\n\nexport const DEFAULT_PLAYER_INFO = {\n  playerId: 2544,\n  fullName: 'Lebron James',\n  teamAbbreviation: 'LAL'\n};\n","import React from 'react';\n\nfunction ProfileList(props) {\n  return (\n    <div className='profile-entry'>\n      <div className='profile-entry-left'>{props.property}</div>\n      <div className='profile-entry-right'>{props.value}</div>\n    </div>\n  );\n}\n\nexport default ProfileList;\n","import React from 'react';\nimport { PROFILE_PIC_URL_PREFIX, TEAM_PIC_URL_PREFIX } from './constants';\nimport ProfileList from './ProfileList';\n\nconst Profile = props => {\n  const {\n    teamAbbreviation,\n    teamCity,\n    teamName,\n    playerName,\n    height,\n    weight,\n    playerId,\n    pts,\n    reb,\n    ast,\n    pie\n  } = props.playerInfo;\n  return (\n    <div className='profile'>\n      <div className='profile-entry player-name'>{`${playerName}`}</div>\n      <img\n        className='profile-pic'\n        src={`${PROFILE_PIC_URL_PREFIX}/${playerId}.png`}\n        alt='Profile'\n      />\n      <ProfileList property='Team' value={`${teamCity} ${teamName}`} />\n      <img\n        className='team-logo'\n        src={`${TEAM_PIC_URL_PREFIX}/${teamAbbreviation}_logo.svg`}\n        alt='Team'\n      />\n      <ProfileList property='Height' value={`${height}`} />\n      <ProfileList property='Weight' value={`${weight}`} />\n      <ProfileList property='PTS' value={`${pts}`} />\n      <ProfileList property='REB' value={`${reb}`} />\n      <ProfileList property='AST' value={`${ast}`} />\n      <ProfileList property='PIE' value={`${pie}`} />\n    </div>\n  );\n};\nexport default Profile;\n","import React from 'react';\nimport { AutoComplete, Input, Icon } from 'antd';\nimport nba from 'nba';\nimport { PROFILE_PIC_URL_PREFIX } from './constants';\n\nconst Option = AutoComplete.Option;\n\nexport class SearchBar extends React.Component {\n  state = {\n    dataSource: []\n  };\n\n  // During search, we pass the search value to nba to get matching results.\n  // Controlled component, every single letter typed will be combined with\n  // previous history (i.e. value) and passed to the backend nba.\n  // The backend nba responds any matching results.\n  handleSearch = value => {\n    console.log(value);\n    this.setState({\n      dataSource: !value\n        ? []\n        : nba.searchPlayers(value).map(player => ({\n            fullName: player.fullName,\n            playerId: player.playerId\n          }))\n    });\n  };\n\n  // Once we select the player, pass the search value to\n  // Profile and Shotchart components.\n  onSelect = playerName => {\n    this.props.handleSelectPlayer(playerName);\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    // Option is the component below search bar showing all the matching options during search.\n    // It's in a form of option list given by Ant design.\n    // To map dataSource, we need the handleSearch.\n    const options = dataSource.map(player => (\n      // In Option, show player image on the left and full name on the right.\n      <Option\n        key={player.fullName}\n        value={player.fullName}\n        className='player-option'\n      >\n        <img\n          className='player-option-image'\n          src={`${PROFILE_PIC_URL_PREFIX}/${player.playerId}.png`}\n          alt='https://ak-static.cms.nba.com/wp-content/uploads/headshots/nba/latest/260x190/2544.png'\n        />\n        <span className='player-option-label'>{player.fullName}</span>\n      </Option>\n    ));\n\n    return (\n      <AutoComplete\n        className='search-bar'\n        size='large'\n        dataSource={options}\n        onSelect={this.onSelect}\n        onSearch={this.handleSearch}\n        // this is the default text in the search bar\n        placeholder='Search NBA Player'\n        optionLabelProp='value'\n      >\n        <Input\n          suffix={<Icon type='search' className='certain-category-icon' />}\n        />\n      </AutoComplete>\n    );\n  }\n}\n","import React from 'react';\nimport { DataViewContainer } from './DataViewContainer';\nimport Profile from './Profile';\nimport { SearchBar } from './SearchBar';\nimport { DEFAULT_PLAYER_INFO } from './constants';\nimport nba from 'nba';\n\n// This is the main part of the web page\nexport class Main extends React.Component {\n  state = {\n    playerInfo: DEFAULT_PLAYER_INFO\n  };\n\n  // Lifecycle, show default player once open the web-page.\n  componentDidMount() {\n    this.loadPlayerInfo(this.state.playerInfo.fullName);\n  }\n\n  loadPlayerInfo = playerName => {\n    console.log(this.state.playerInfo);\n    nba.stats\n      .playerInfo({ PlayerID: nba.findPlayer(playerName).playerId })\n      .then(info => {\n        const { commonPlayerInfo, playerHeadlineStats } = info;\n        const playerInfo = {\n          ...commonPlayerInfo[0],\n          ...playerHeadlineStats[0]\n        };\n        this.setState({ playerInfo });\n      });\n  };\n\n  handleSelectPlayer = playerName => {\n    this.loadPlayerInfo(playerName);\n  };\n\n  render() {\n    return (\n      <div className='main'>\n        <SearchBar handleSelectPlayer={this.handleSelectPlayer} />\n        <div className='player'>\n          <Profile playerInfo={this.state.playerInfo} />\n          <DataViewContainer playerId={this.state.playerInfo.playerId} />\n        </div>\n      </div>\n    );\n  }\n}\n\n// import React, { useState, useEffect } from 'react';\n// import { DataViewContainer } from './DataViewContainer';\n// import Profile from './Profile';\n// import { SearchBar } from './SearchBar';\n// // import { DEFAULT_PLAYER_INFO } from './constants';\n// import nba from 'nba';\n\n// // This is the main part of the web page\n// const Main = () => {\n//   const [playerInfo, setPlayerInfo] = useState({\n//     playerId: 2544,\n//     fullName: 'Lebron James',\n//     teamAbbreviation: 'LAL'\n//   });\n\n//   // Lifecycle, show default player once open the web-page.\n//   useEffect((playerInfo, loadPlayerInfo) => {\n//     loadPlayerInfo(playerInfo.fullName);\n//   }, []);\n\n//   const loadPlayerInfo = playerName => {\n//     console.log(playerInfo);\n//     nba.stats\n//       .playerInfo({ PlayerID: nba.findPlayer(playerName).playerId })\n//       .then(info => {\n//         const { commonPlayerInfo, playerHeadlineStats } = info;\n//         const newPlayerInfo = {\n//           ...commonPlayerInfo[0],\n//           ...playerHeadlineStats[0]\n//         };\n//         setPlayerInfo(newPlayerInfo);\n//       });\n//   };\n\n//   const handleSelectPlayer = playerName => {\n//     loadPlayerInfo(playerName);\n//   };\n//   return (\n//     <div className='main'>\n//       <SearchBar handleSelectPlayer={handleSelectPlayer} />\n//       <div className='player'>\n//         <Profile playerInfo={playerInfo} />\n//         <DataViewContainer playerId={playerInfo.playerId} />\n//       </div>\n//     </div>\n//   );\n// };\n// export default Main;\n","import React from 'react';\nimport TopNavBar from './TopNavBar';\n// import Main from './Main';\nimport { Main } from './Main';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <TopNavBar />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}